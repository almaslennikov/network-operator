on:
  issues:
    types:
      - opened

jobs:
  update-network-operator-version:
    if: startsWith(github.event.issue.title, 'Release v')
    runs-on: ubuntu-24.04
    outputs:
      app_version: ${{ steps.set-version.outputs.app_version }}
      release_branch: ${{ steps.determine-branches.outputs.release_branch }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      ISSUE_TITLE: ${{ github.event.issue.title }}
    steps:
      - uses: actions/checkout@v4
      - id: set-version
        run: |
          APP_VERSION=$(echo $ISSUE_TITLE | awk '{ print $2 }')
          echo "app_version=${APP_VERSION}" >> $GITHUB_OUTPUT
          echo "APP_VERSION=${APP_VERSION}" >> $GITHUB_ENV
      - run: |
          echo "CHART_VERSION=$(echo ${APP_VERSION#v})" | tee -a $GITHUB_ENV
      - name: Determine branches
        id: determine-branches
        run: |
          v_major_minor=$(echo $APP_VERSION | grep -Eo '^v[0-9]+\.[0-9]+')
          release_branch=$v_major_minor.x
          echo "RELEASE_BRANCH=${release_branch}" >> $GITHUB_OUTPUT

          if echo $APP_VERSION | grep -q beta; then
            base_branch=master
          else
            base_branch=$release_branch
          fi
          echo BASE_BRANCH=$base_branch | tee -a $GITHUB_ENV
      - name: Verify release branch exists if "rc" version
        run: |
          if echo $APP_VERSION | grep -q 'rc'; then
            git fetch origin
            if ! git ls-remote --heads origin $BASE_BRANCH | grep -q "$BASE_BRANCH"; then
              git config user.name almaslennikov
              git config user.email amaslennikov@nvidia.com
              git checkout -b $BASE_BRANCH
              git push -u origin $BASE_BRANCH
            fi
          fi
      - run: |
          git config user.name almaslennikov
          git config user.email amaslennikov@nvidia.com
          git fetch origin $BASE_BRANCH
          git checkout -b cicd/update-network-operator-to-$APP_VERSION origin/$BASE_BRANCH
          yq -i '.NetworkOperator.version = "${{ env.APP_VERSION }}"' hack/release.yaml
          yq -i '.version = "${{ env.CHART_VERSION }}"'               deployment/network-operator/Chart.yaml
          yq -i '.appVersion = "${{ env.APP_VERSION }}"'              deployment/network-operator/Chart.yaml
          make release-build

          if ! git diff --color --unified=0 --exit-code; then
            git add deployment/network-operator/
            git add hack/release.yaml
            git commit -sam "cicd: update Network Operator to $APP_VERSION in chart values"
            git push -u origin cicd/update-network-operator-to-$APP_VERSION
            gh pr create \
              --repo ${{ github.repository_owner }}/network-operator \
              --base $BASE_BRANCH \
              --head $(git branch --show-current) \
              --title "cicd: update Network Operator to $APP_VERSION in chart values" \
              --body "Created by the *${{ github.job }}* job."
          fi

  get-managed-components:
    needs: update-network-operator-version
    runs-on: ubuntu-24.04
    outputs:
      managed_components: ${{ steps.set-components.outputs.managed_components }}
    steps:
      - uses: actions/checkout@v4
      - id: set-components
        run: |
          # Extract the managedRepo field from each component
          # This will create a JSON array of the repository names
          components=$(yq 'to_entries | map(select(.value.managedRepo != null) | .value.managedRepo)' hack/release.yaml)
          echo "managed_components=${components}" >> $GITHUB_OUTPUT

  update-component-versions:
    runs-on: ubuntu-24.04
    needs: [get-managed-components, update-network-operator-version]
    strategy:
      matrix:
        component: ${{ fromJson(needs.get-managed-components.outputs.managed_components) }}
    env:
      GH_TOKEN: ${{ secrets.secrets.GITHUB_TOKEN }}
      APP_VERSION: ${{ needs.update-network-operator-version.outputs.app_version }}
      RELEASE_BRANCH: ${{ needs.update-network-operator-version.outputs.release_branch }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository_owner }}/${{ matrix.component }}
          path: ${{ matrix.component }}
          fetch-depth: 0
      - name: Create tag to trigger PR that update image tags in network-operator values
        run: |
          cd ${{ matrix.component }}
          git config user.name almaslennikov
          git config user.email amaslennikov@nvidia.com
          git fetch origin || echo "Failed to fetch from remote"

          echo "Checking if the release branch exists"
          if git ls-remote --heads origin $RELEASE_BRANCH | grep -q "$RELEASE_BRANCH"; then
            echo "Release branch exists, using it"
            git checkout -b $APP_VERSION origin/$RELEASE_BRANCH || echo "Failed to checkout branch"
          else
            echo "Release branch doesn't exist, creating it"
            echo "Branch $RELEASE_BRANCH does not exist for ${{ matrix.component }}, creating it from default branch"

            git checkout -b $RELEASE_BRANCH
            git push -u origin $RELEASE_BRANCH

            echo "Creating the version branch from the new release branch"
            git checkout -b $APP_VERSION
          fi

          echo "Creating and pushing the tag"
          git tag network-operator-$APP_VERSION
          git push origin --tags || echo "Failed to push tags"
